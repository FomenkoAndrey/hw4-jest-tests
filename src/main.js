console.log('#13. JavaScript homework example file')

/*
 * #1
 *
 * Написати функцію, яка приймає рядок як вхідний параметр і перевіряє, чи є цей рядок валідною електронною адресою за допомогою регулярного виразу.
 * Функція повертає true, якщо електронна адреса валідна, і false в іншому випадку.
 *
 */

function isValidEmail(email) {
  const regex = /^(?!.*\.\.)[a-zA-Z0-9](?:[\w.-]*[a-zA-Z0-9])?@[a-zA-Z0-9-]+(?:\.[a-zA-Z]{2,4})+$/
  return regex.test(email)
}

// Тестові випадки
// console.log(isValidEmail('example@example.com')) // Повинно вивести: true
// console.log(isValidEmail('example.com'))        // Повинно вивести: false (немає @)
// console.log(isValidEmail('example@'))           // Повинно вивести: false (немає домену)
// console.log(isValidEmail('example@example.abcdef')) // Повинно вивести: false (довгий TLD)
// console.log(isValidEmail('mail@.mail.com.ua'))  // Повинно вивести: false (крапка на початку домену)
// console.log(isValidEmail(''))                   // Повинно вивести: false (пустий рядок)
// console.log(isValidEmail(undefined))            // Повинно вивести: false (undefined)
// console.log(isValidEmail('user@sub.domain.com')) // Повинно вивести: true (коректна адреса)
// console.log(isValidEmail('u.ser+123@domain.org')) // Повинно вивести: true (допустимі символи)
// console.log(isValidEmail('example@domain.c'))   // Повинно вивести: false (TLD занадто короткий)
// console.log(isValidEmail('example@-domain.com')) // Повинно вивести: false (дефіс на початку домену)
// console.log(isValidEmail('example@domain..com')) // Повинно вивести: false (подвійна крапка в домені)
// console.log(isValidEmail('.example@domain.com')) // Повинно вивести: false (крапка на початку локальної частини)

/*
 * Пояснення регулярного виразу: /^(?!.*\.\.)[a-zA-Z0-9](?:[\w.-]*[a-zA-Z0-9])?@[a-zA-Z0-9-]+(?:\.[a-zA-Z]{2,4})+$/
 *
 * 1. ^
 *    - Початок рядка. Перевірка починається з першого символу.
 *
 * 2. (?!.*\.\.)
 *    - "Negative lookahead" (негативний погляд уперед).
 *    - Гарантує, що рядок не містить подвійних крапок (`..`) в будь-якому місці.
 *    - Це запобігає таким адресам, як "example..name@domain.com".
 *
 * 3. [a-zA-Z0-9]
 *    - Локальна частина (перед `@`) повинна починатися з літери (`a-z`, `A-Z`) або цифри (`0-9`).
 *    - Забороняє крапку, дефіс чи інші символи на початку.
 *
 * 4. (?:[\w.-]*[a-zA-Z0-9])?
 *    - Необов'язкова група для решти локальної частини.
 *    - [\w.-]*:
 *        - Дозволяє будь-яку кількість літер, цифр, крапок (`.`), дефісів (`-`) або підкреслень (`_`).
 *    - [a-zA-Z0-9]:
 *        - Забезпечує, що останній символ локальної частини є літерою чи цифрою.
 *    - Група є необов’язковою, тому адреси, такі як "a@b.com", також будуть валідними.
 *
 * 5. @
 *    - Обов’язковий символ `@`, що розділяє локальну частину від доменної.
 *
 * 6. [a-zA-Z0-9-]+
 *    - Домена частина (до крапки) повинна складатися з:
 *        - Літер (`a-z`, `A-Z`),
 *        - Цифр (`0-9`),
 *        - Дефісів (`-`).
 *    - Дефіс не може бути на початку чи в кінці, оскільки `[a-zA-Z0-9-]+` гарантує, що мінімум один символ — літера або цифра.
 *
 * 7. (?:\.[a-zA-Z]{2,4})+
 *    - Група для доменної частини з крапками:
 *        - \.: Крапка (`.`) є обов’язковою.
 *        - [a-zA-Z]{2,4}: TLD (верхній рівень домену) має бути від 2 до 4 літер.
 *    - "+": Гарантує, що домен має хоча б одну крапку (наприклад, "domain.com") і може містити піддомени ("sub.domain.com").
 *
 * 8. $
 *    - Кінець рядка. Перевірка завершується останнім символом.
 *
 * Підсумок:
 * - Локальна частина: починається з літери або цифри, може містити крапки, дефіси та підкреслення, але не закінчується ними.
 * - Доменна частина: починається з літери або цифри, може містити дефіси, але не крапки чи дефіси на початку/кінці.
 * - TLD: 2–4 літери.
 *
 * Приклади валідних адрес:
 * - "example@example.com"
 * - "user.name@sub-domain.example.org"
 * - "u.ser123+filter@domain.io"
 *
 * Приклади невалідних адрес:
 * - "example..name@domain.com" (подвійні крапки)
 * - ".example@domain.com" (крапка на початку локальної частини)
 * - "example@.domain.com" (крапка на початку домену)
 * - "example@domain.c" (TLD занадто короткий)
 */

/*
 * #2
 *
 * Написати функцію, яка приймає рядок як вхідний параметр і перевіряє, чи є цей рядок валідним URL веб-сайту за допомогою регулярного виразу.
 * Функція повертає true, якщо URL валідний, і false в іншому випадку.
 *
 */

/*

*/

function isValidUrl(url) {
  const regex =
    /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/
  return regex.test(url)
}

// console.log(isValidUrl('https://www.example.com')) // Повинно вивести: true
// console.log(isValidUrl('invalid-url'))             // Повинно вивести: false

// Експорт функції для використання та тестування
export { isValidEmail, isValidUrl }
